print("1")
import random

def number_guessing_game():
    print("Welcome to the Number Guessing Game!")
    print("I have chosen a number between 1 and 100.")

    secret_number = random.randint(1, 100)
    
    attempts = 0
    guess = None
    
    while guess != secret_number:
        try:
            guess = int(input("Enter your guess (between 1 and 100): "))
            if guess < 1 or guess > 100:
                print("Please enter a number between 1 and 100.")
                continue
            
            attempts += 1
            
            if guess < secret_number:
                print("Too low! Try again.")
            elif guess > secret_number:
                print("Too high! Try again.")
            else:
                print(f"Congratulations! You've guessed the number {secret_number} correctly!")
                print(f"It took you {attempts} attempts.")
        
        except ValueError:
            print("Invalid input! Please enter a valid number.")
    
    print("Game over.")

number_guessing_game()

print("2")
import random

class Quiz:
    def __init__(self, questions):
        self.questions = questions
        self.total_questions = len(questions)
        self.current_question_index = 0
        self.score = 0
        self.user_answers = [None] * self.total_questions
    
    def display_question(self):
        print(f"Question {self.current_question_index + 1}:")
        print(self.questions[self.current_question_index]['question'])
    
    def check_answer(self, answer):
        correct_answer = self.questions[self.current_question_index]['answer']
        if answer.lower() == correct_answer.lower():
            self.score += 1
        self.user_answers[self.current_question_index] = answer
    
    def display_results(self):
        print("Quiz Results:")
        print(f"Total questions: {self.total_questions}")
        print(f"Your score: {self.score}/{self.total_questions}\n")
        
        print("Review Answers:")
        for i, question in enumerate(self.questions):
            print(f"Question {i + 1}: {question['question']}")
            print(f"Your Answer: {self.user_answers[i]}")
            print(f"Correct Answer: {question['answer']}\n")
    
    def run_quiz(self):
        random.shuffle(self.questions)
        
        print("Welcome to the Quiz!")
        print("Type your answer and press Enter to submit.")
        input("Press Enter to start the quiz...")
        
        while self.current_question_index < self.total_questions:
            self.display_question()
            user_answer = input("Your answer: ")
            self.check_answer(user_answer)
            self.current_question_index += 1
        
        print("\nQuiz completed!")
        self.display_results()

questions_data = [{'question': "What is the capital of France?",'answer': "Paris" },{'question': "Who wrote 'Hamlet'?",'answer': "William Shakespeare"},]

quiz = Quiz(questions_data)

quiz.run_quiz()

print("3")
import time

def typing_challenge(text_to_type):
    print("Welcome to the Typing Challenge!")
    print("Type the following text as accurately and quickly as possible:\n")
    print(text_to_type)
    
    input("Press Enter when you are ready to start...")
    
    start_time = time.time()
    user_input = input("Type the text here: ")
    end_time = time.time()
    
    elapsed_time = end_time - start_time
    
    correct_chars = sum(1 for u, t in zip(user_input, text_to_type) if u == t)
    accuracy = (correct_chars / len(text_to_type)) * 100
    
    words_per_minute = len(user_input.split()) / (elapsed_time / 60) if elapsed_time > 0 else 0
    
    print("\nResults:")
    print(f"Time taken: {elapsed_time:.2f} seconds")
    print(f"Accuracy: {accuracy:.2f}%")
    print(f"Words per minute (WPM): {words_per_minute:.2f}")
    
    # Score calculation (Example: combine accuracy and WPM into a score formula)
    score = accuracy * (words_per_minute / 10)
    print(f"Your score: {score:.2f}")

challenge_text = "The quick brown fox jumps over the lazy dog."

typing_challenge(challenge_text)

print("4")
def display_menu():
    print("Unit Conversion Menu:")
    print("1. Millimeters to Centimeters")
    print("2. Centimeters to Meters")
    print("3. Feet to Meters")
    print("4. Inches to Centimeters")
    print("5. Kilometers to Miles")

def millimeters_to_centimeters(mm):
    return mm / 10

def centimeters_to_meters(cm):
    return cm / 100

def feet_to_meters(feet):
    return feet * 0.3048

def inches_to_centimeters(inches):
    return inches * 2.54

def kilometers_to_miles(km):
    return km * 0.621371

def unit_conversion(choice):
    if choice == 1:
        mm = float(input("Enter length in millimeters: "))
        cm = millimeters_to_centimeters(mm)
        print(f"{mm} mm is equal to {cm:.2f} cm.")
    elif choice == 2:
        cm = float(input("Enter length in centimeters: "))
        m = centimeters_to_meters(cm)
        print(f"{cm} cm is equal to {m:.2f} m.")
    elif choice == 3:
        feet = float(input("Enter length in feet: "))
        m = feet_to_meters(feet)
        print(f"{feet} ft is equal to {m:.2f} m.")
    elif choice == 4:
        inches = float(input("Enter length in inches: "))
        cm = inches_to_centimeters(inches)
        print(f"{inches} inches is equal to {cm:.2f} cm.")
    elif choice == 5:
        km = float(input("Enter length in kilometers: "))
        miles = kilometers_to_miles(km)
        print(f"{km} km is equal to {miles:.2f} miles.")
    else:
        print("Invalid choice. Please select a number from 1 to 5.")

while True:
    display_menu()
    choice = int(input("Enter your choice (1-5): "))
    unit_conversion(choice)
    
    continue_or_not = input("Do you want to convert another unit? (yes/no): ").lower()
    if continue_or_not != 'yes':
        print("Thank you for using the unit conversion program!")
        break

print("5")
def get_player_choice():
    while True:
        player_choice = input("Enter your choice (rock/paper/scissors): ").strip().lower()
        if player_choice in ['rock', 'paper', 'scissors']:
            return player_choice
        else:
            print("Invalid choice! Please enter 'rock', 'paper', or 'scissors'.")

def determine_round_winner(player1_choice, player2_choice):
    if player1_choice == player2_choice:
        return None  # Tie
    
    if (player1_choice == 'rock' and player2_choice == 'scissors') or \
       (player1_choice == 'scissors' and player2_choice == 'paper') or \
       (player1_choice == 'paper' and player2_choice == 'rock'):
        return 1  # Player 1 wins
    
    return 2  # Player 2 wins

def play_best_of_three():
    player1_wins = 0
    player2_wins = 0
    
    while player1_wins < 2 and player2_wins < 2:
        print("\nRound Start!")
        
        player1_choice = get_player_choice()
        player2_choice = random.choice(['rock', 'paper', 'scissors'])  # Computer choice
        
        print(f"Player 1 chose: {player1_choice}")
        print(f"Player 2 chose: {player2_choice}")
        
        round_winner = determine_round_winner(player1_choice, player2_choice)
        
        if round_winner == 1:
            print("Player 1 wins this round!")
            player1_wins += 1
        elif round_winner == 2:
            print("Player 2 wins this round!")
            player2_wins += 1
        else:
            print("It's a tie this round!")
        
        print(f"Score: Player 1 - {player1_wins}, Player 2 - {player2_wins}")
    
    if player1_wins == 2:
        print("\nPlayer 1 wins the game!")
    else:
        print("\nPlayer 2 wins the game!")

play_best_of_three()

print("6")
def roll_dice():
    return random.randint(1, 6)

def play_best_of_three():
    player1_wins = 0
    player2_wins = 0
    
    while player1_wins < 2 and player2_wins < 2:
        print("\nRound Start!")
        
        input(f"Player 1, press Enter to roll the dice...")
        player1_roll = roll_dice()
        print(f"Player 1 rolled: {player1_roll}")
    
        input(f"Player 2, press Enter to roll the dice...")
        player2_roll = roll_dice()
        print(f"Player 2 rolled: {player2_roll}")
        
        if player1_roll > player2_roll:
            print("Player 1 wins this round!")
            player1_wins += 1
        elif player2_roll > player1_roll:
            print("Player 2 wins this round!")
            player2_wins += 1
        else:
            print("It's a tie this round!")
        
        print(f"Score: Player 1 - {player1_wins}, Player 2 - {player2_wins}")
    
    if player1_wins == 2:
        print("\nPlayer 1 wins the game!")
    else:
        print("\nPlayer 2 wins the game!")

play_best_of_three()

print("7")
def print_board(board):
    """Prints the Tic-Tac-Toe board."""
    for row in board:
        print(" | ".join(row))
        print("---------")

def check_win(board, player):
    """Check if the current player has won."""
    for row in board:
        if all([cell == player for cell in row]):
            return True
    
    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True
    
    if all([board[i][i] == player for i in range(3)]) or all([board[i][2-i] == player for i in range(3)]):
        return True
    
    return False

def is_board_full(board):
    """Check if the board is full (no more moves possible)."""
    for row in board:
        for cell in row:
            if cell == ' ':
                return False
    return True

def tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    players = ['Player 1', 'Player 2']
    symbols = ['X', 'O']
    current_player = 0
    
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)
    
    while True:
        player = players[current_player]
        symbol = symbols[current_player]
        
        while True:
            try:
                row = int(input(f"{player} ({symbol}), enter row number (0-2): "))
                col = int(input(f"{player} ({symbol}), enter column number (0-2): "))
                
                if row < 0 or row > 2 or col < 0 or col > 2:
                    print("Invalid input! Row and column must be between 0 and 2.")
                    continue
                
                if board[row][col] != ' ':
                    print("That cell is already occupied. Choose another.")
                    continue
                
                board[row][col] = symbol
                break
            
            except ValueError:
                print("Invalid input! Please enter integers for row and column.")
        
        print_board(board)
        
        if check_win(board, symbol):
            print(f"Congratulations! {player} wins!")
            break
        
        if is_board_full(board):
            print("It's a draw!")
            break
       
        current_player = (current_player + 1) % 2

tic_tac_toe()

print("8")
import random
import string

def generate_password(length=8):
  
    characters = string.ascii_letters + string.digits  # includes uppercase letters, lowercase letters, and digits
    
    password = ''.join(random.choice(characters) for _ in range(length))
    
    return password

password = generate_password()
print(f"Generated Password: {password}")

print("MATRIX")
print("matrix 1")
def transpose_matrix(matrix):
    rows = len(matrix)
    cols = len(matrix[0]) if rows > 0 else 0
  
    transposed = [[0]*rows for _ in range(cols)]
    
    for i in range(rows):
        for j in range(cols):
            transposed[j][i] = matrix[i][j]
    
    return transposed

matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
    [10, 11, 12]
]

transposed_matrix = transpose_matrix(matrix)

print("Original Matrix:")
for row in matrix:
    print(row)

print("\nTransposed Matrix:")
for row in transposed_matrix:
    print(row)

print("matrix 2")
import numpy as np

array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

row_sums = np.sum(array, axis=1)

col_sums = np.sum(array, axis=0)

print("Original array:\n", array)  # Improved formatting for clarity
print("Sum of rows:", row_sums)
print("Sum of columns:", col_sums)

print("matrix 3")
def sum_diagonals(matrix):
  """Calculates the sum of the elements on the diagonals of a square matrix.
  Args:
    matrix: A square matrix represented as a list of lists.
  Returns:
    The sum of the elements on the diagonals of the matrix.
  """

  diagonal_sum = 0
  rows = len(matrix)

  for i in range(rows):
    diagonal_sum += matrix[i][i]

  if rows % 2 != 0:
    diagonal_sum -= matrix[rows // 2][rows // 2]

  for i in range(rows):
    diagonal_sum += matrix[i][rows - i - 1]

  return diagonal_sum

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
diagonal_sum = sum_diagonals(matrix)
print("Sum of diagonals:", diagonal_sum)

